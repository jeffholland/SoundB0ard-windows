let rhythms_string = [
  #shiko
  "1 ~ ~ ~ 1 ~ 1 ~ ~ ~ 1 ~ 1 ~ ~ ~",
  #son
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ 1 ~ ~ ~",
  #rumba
  "1 ~ ~ 1 ~ ~ ~ 1 ~ ~ 1 ~ 1 ~ ~ ~",
  #soukous
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 1 ~ ~ ~ ~",
  #gahu
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ ~ ~ 1 ~",
  #bossa-nova
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ ~ 1 ~ ~"
]

let rhythms_int = [
  #shiko
  [1, ~, ~, ~, 1, ~, 1, ~, ~, ~, 1, ~, 1, ~, ~, ~],
  #son
  [1, ~, ~, 1, ~, ~, 1, ~, ~, ~, 1, ~, 1, ~, ~, ~],
  #rumba
  [1, ~, ~, 1, ~, ~, ~, 1, ~, ~, 1, ~, 1, ~, ~, ~],
  #soukous
  [1, ~, ~, 1, ~, ~, 1, ~, ~, ~, 1, 1, ~, ~, ~, ~],
  #gahu
  [1, ~, ~, 1, ~, ~, 1, ~, ~, ~, 1, ~, ~, ~, 1, ~],
  #bossa-nova
  [1, ~, ~, 1, ~, ~, 1, ~, ~, ~, 1, ~, ~, 1, ~, ~]
]

let distrhythms_string = gen()
{
  setup() {}

  run() {
    let idx = rand(len(rhythms_string))
      #puts("IDX is ", idx, " - pattern is: ", rhythms_string[idx])
      return rhythms_string[idx]
  }
}

let riff = fn()
{
  let valid_notes = notes_in_key();
  #print("VALLEYNOTES:", valid_notes);
  let beat = bjork(rand(9) + 2, 16);
  for ( i = 0; i < 16; ++i) {
    if (beat[i] == 1) {
      let multi = rand(4) + 2;
      beat[i] = valid_notes[rand(len(valid_notes))] + 12*multi;
    }
  }
  return beat;
}

let map = fn(arrray, fooonction)
{
  let mapduh = [];
  for (i = 0; i < len(arrray); ++i)
  {
    if (arrray[i] ) {
      mapduh = push(mapduh, fooonction(arrray[i]));
    } else {
      mapduh = push(mapduh, ~);
    }
  }
  return mapduh;
}

let generate_note_map = fn(note_seq, len_pulses, note_map, offset)
{
  let nlen = len(note_seq);
  let pulses_per = len_pulses / nlen;

  for (i = 0; i < nlen; ++i) {
    if (note_seq[i])  {
      if (is_array(note_seq[i])) {
        generate_note_map(note_seq[i], pulses_per, note_map, i*pulses_per);
      } else {
        note_map[offset + i*pulses_per] = note_seq[i];
      }
    }
  }
  return note_map;
}

let rec_play_array = fn(sound_generator_target, note_seq)
{
  let note_map = {};
  generate_note_map(note_seq, 3840, note_map, 0);

  for (i = 0; i < 3840; ++i) {
    if (note_map[i]) {
      if (note_map[i] > 0) {
        note_on_at(sound_generator_target, note_map[i], i)
      }
    }
  }
}

# let play_array = fn(sound_generator_target, note_seq)
# {
#   let nlen = len(note_seq);
#   let pulses_per = 3840 / nlen;
#
#   for (i = 0; i < nlen; ++i) {
#     if (note_seq[i])  {
#       if (note_seq[i] > 0) {
#         note_on_at(sound_generator_target, note_seq[i], i * pulses_per);
#       }
#     }
#   }
# }

let play_chord = fn(sound_generator_target, note_seq)
{
  let nlen = len(note_seq);
  for (i = 0; i < nlen; ++i) {
    if (note_seq[i] > 0) {
      note_on(sound_generator_target, note_seq[i]);
    }
  }
}

let rand_beat = gen()
{
  setup() {}

  run() {
    let idx = rand(len(rhythms_int))
      #puts("IDX is ", idx, " - pattern is: ", rhythms_int[idx])
      return rhythms_int[idx]
  }
}

let count = 0;

let countr = gen()
{
  setup() {}
  run()
  {
    ++count;
  }
}

p0 # countr ;

# i.e. 3840 / 16 == 240 midi Pulses Per 16th
let pp = 240;

