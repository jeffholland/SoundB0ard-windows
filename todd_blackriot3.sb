let uh1 = sample(TT-BLACKRIOT-DAYINLIFE/UH1.wav)
let uh2 = sample(TT-BLACKRIOT-DAYINLIFE/UH2.wav)
let uh3 = sample(TT-BLACKRIOT-DAYINLIFE/UH3.wav)
let uhz = [uh1, uh2, uh3]

let pia1 = sample(TT-BLACKRIOT-WARLOCK/piano1.wav)
let pia2 = sample(TT-BLACKRIOT-WARLOCK/piano2.wav)
let pia3 = sample(TT-BLACKRIOT-WARLOCK/piano3.wav)
let pia4 = sample(TT-BLACKRIOT-WARLOCK/piano4.wav)
let pianoz = [pia1, pia2, pia3, pia4]
#
## let sn = sample(TT-BLACKRIOT-WARLOCK/snclean.wav)
## let bg = sample(TT-BLACKRIOT-WARLOCK/bong3.wav)
## let drw = sample(TT-BLACKRIOT-WARLOCK/drwop.wav)
## let tom2 = sample(TT-BLACKRIOT-DAYINLIFE/tom2.wav)
## let tom3 = sample(TT-BLACKRIOT-DAYINLIFE/tom3.wav)
## let wh = sample(TT-BLACKRIOT-DAYINLIFE/whistle.wav)
## # let percz = [drw]
## let bd = sample(TT-BLACKRIOT-WARLOCK/bd1.wav)
## let bdz = [bd]
#
let too = sample(TT-BLACKRIOT-WARLOCK/too.wav)
let snp = sample(TT-BLACKRIOT-WARLOCK/snp.wav)
let clip = sample(TT-BLACKRIOT-WARLOCK/clip.wav)
let bw = sample(TT-BLACKRIOT-WARLOCK/bwoc.wav)
let percz = [bw, too, snp, clip]

let rhythms_string = [
  #shiko
  "1 ~ ~ ~ 1 ~ 1 ~ ~ ~ 1 ~ 1 ~ ~ ~",
  #son
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ 1 ~ ~ ~",
  #rumba
  "1 ~ ~ 1 ~ ~ ~ 1 ~ ~ 1 ~ 1 ~ ~ ~",
  #soukous
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 1 ~ ~ ~ ~",
  #gahu
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ ~ ~ 1 ~",
  #bossa-nova
  "1 ~ ~ 1 ~ ~ 1 ~ ~ ~ 1 ~ ~ 1 ~ ~"
]

let rhythms_int = [
  #shiko
  [1, ~, ~, ~, 1, ~, 1, ~, ~, ~, 1, ~, 1, ~, ~, ~],
  #son
  [1, ~, ~, 1, ~, ~, 1, ~, ~, ~, 1, ~, 1, ~, ~, ~],
  #rumba
  [1, ~, ~, 1, ~, ~, ~, 1, ~, ~, 1, ~, 1, ~, ~, ~],
  #soukous
  [1, ~, ~, 1, ~, ~, 1, ~, ~, ~, 1, 1, ~, ~, ~, ~],
  #gahu
  [1, ~, ~, 1, ~, ~, 1, ~, ~, ~, 1, ~, ~, ~, 1, ~],
  #bossa-nova
  [1, ~, ~, 1, ~, ~, 1, ~, ~, ~, 1, ~, ~, 1, ~, ~]
]

let distrhythms_string = gen(blah)
{
  setup() { 
  }

  run() {
    let idx = rand(len(rhythms_string))
    #puts("IDX is ", idx, " - pattern is: ", rhythms_string[idx])
    return rhythms_string[idx]
  }
}

let distrhythms_int = fn()
{
  let idx = rand(len(rhythms_int))
  #puts("IDX is ", idx, " - pattern is: ", rhythms_int[idx])
  return rhythms_int[idx]
}

let uh_beat = gen(samples, how_often, min_midi, max_midi)
{
    setup()
    { 
       let samplz = samples
       let counter = 0
       let idx = 0
       let midi_hits_per_cycle = 3840
       let rhythm_int = distrhythms_int()

       let every_n = how_often
       let min_midi = min_midi
       let max_midi = max_midi

       let midi_incr_incr = 1


    }

    run()
    {
       if (counter % 7 == 0) {
         rhythm_int = distrhythms_int()
       }

       if (counter % every_n == 0) {
         let midi_incr = midi_hits_per_cycle / len(rhythm_int)
         for ( i = 0; i < len(rhythm_int); ++i ) {
           if (rhythm_int[i] == 1) {
             noteOnDelayed(samplz[idx], 1, i*midi_incr)
             for ( j = 0; j < midi_incr_incr; ++j ) {
               noteOnDelayed(samplz[idx], 1, i*midi_incr + (midi_incr / midi_incr_incr))
               idx = incr(idx,0,len(samplz))
             }
           }
           midi_incr_incr = incr(midi_incr_incr, min_midi, max_midi)
         }
       }
       ++counter
    }
}

