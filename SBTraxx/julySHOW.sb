# bpm 150; play skrslazrs/SHÃ˜CK13.wav

# let cmon = loop(dloops/CMONhyperOnAMP.wav); set cmon:len 2;
# let rap = loop(voices/back2basiccRAPAMP.wav); set rap:len 4 ; p2 $ blah_gen

let hh8 = sample(ch/hh8.aif);
let phh = sample(ch/pumpDistortHH.wav);
let cch6 = sample(ch/dr606closedhh.aif);

let sampz = [hh8, phh, cch6];
let sx = 0;

let vblah_gen = gen()
{
  setup()
  {
    let blen = 128;
    let beat = rand_array(blen, 0, 7);
    let pp = PPBAR / blen;
    let hpp = pp / 3;
  }
  run()
  {
    if (count % 3 == 0 ){
      let offset = 0;
      for (i = 0; i < len(beat); ++i) {
        if (i % 2 == 0) {
          offset = hpp;
        }
        if (beat[i] < len(sampz)) {
          note_on_at(sampz[sx], 1, i * pp + offset);
          sx = incr(sx, 0, len(sampz));
        }
      }
    }
    if (count % 4 ==0) {
      beat = rand_array(blen, 0, 7);
    }
  }
}

# let tb2 = loop(dloops/technB.wav); set tb2:len 2
# let tb = loop(dloops/techNOBe.wav); set tb:len 2

# let arc = loop(loops/aphexCURve.aiff);

# let lgn = sample(legowelt/Synth-SeeFeelesque2.wav); vol lgn 0.4;
let tnblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    unsolo();
    if (count % 3 == 0) {
      set tb:scramble 1;
      set bold:scramble 1;
    }
    if (count % 4 == 0) {
      set tb2:scramble 1;
    }
    set tb2:reverse 0;
    if (count % 7 == 0) {
      set tb2:reverse 1;
    }
    # let arc = loop(loops/aphexCURve.aiff);
    # let lgn = sample(legowelt/Synth-SeeFeelesque2.wav); vol lgn 0.4
    if (count % 4 == 0) {
      set arc:stutter 1;
      note_on_at(lgn, 1, 4 * pp);
    }
  }
}


# let boom = loop(dloops/90sboombap2Bar.aiff); set boom:len 2; vol boom 0
let wahblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 < 3)  {
      vol boom 0.5;
      set boom:scramble 1;
    } else {
      vol boom 0;
    }
  }
}


let lwblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 8 == 0) {
      play legowelt/Synth-SeeFeelesque2.wav;
    }
  }
}

let patlo = midi_array({1548:"71:127:5089", 1552:"74:127:5130"});
let patno = midi_array({1495:"74:126:206", 1987:"74:121:184", 2453:"71:120:227", 2858:"71:87:233", 1417:"74:123:206", 1884:"71:121:240"});
let dxblah_gen = gen()
{
  setup()
  {
    # i like klonk
    # dx = narf
    let bemt = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1];
    let ntz = [15, 27, 22];
    let nx = 0;
    let mel = combinor(bemt, notes_in_chord(15, 1));
    let d = 40;

    let algoz = [3, 4];
    let ax = 0;
  }
  run()
  {

    if (count % 3 < 2) {
      play_array(dx, mel, dur = d);
      d = d + 50;
      if (d > 300) {
        d = 40;
      }
    }
    if (count % 7 == 0) {
      #play_array(dx, patlo);
    }
    if (count % 8 == 0) {
      play_array(dx, reverse(mel));
      play_array(dx, down(patno, 12), dur = 20);
      set dx:algo algoz[ax];
      ax = incr(ax, 0, len(algoz));
    }
  }
}

# let krs = loop(dloops/krushSnareRoll.aiff);

let dx2blah_gen = gen()
{
  # muffin **
  # quazzz sounding good.
  # narf ok
  setup()
  {
    let bll = [5, 7, 11, 4];
    let bx = 0;
    let beat= bjork(bll[bx], 16);

    let notz = notes_in_chord(15, 1, 1);
    let nx = 0;

  }
  run()
  {

    if (count % 8 > 6) {
      beat = rotate(beat, 2);
    }
    if (count % 13 == 0) {
      beat = reverse(beat);
    }
    if (count % 14 == 0) {
      beat = bjork(bll[bx], 16);
      bx = incr(bx, 0, len(bll));
    }

    if (count % 2 == 0) {
      play_array(dx2, combinor(beat, notz));
    }

    for (i = 0; i < 16; ++i) {
      if (beat[i] == 1) {
        note_on_at(dx2, notz[nx], i * pp, dur = 100);
      }
      nx = incr(nx, 0, len(notz));
    }
    nx = incr(nx, 0, len(notz));

  }
}


let mblah_gen = gen()
{
  setup()
  {
    let rndb = mask(rand_array(16, 0, 1), "00f0");
    let mmoel = combinor(rndb, notes_in_chord(45, 1,1 ));
    #let mmoel = combinor(rndb, notes_in_chord(33, 1,1 ));
    #let mmoel = combinor(rndb, notes_in_chord(21, 1, 1));

  }
  run()
  {
    if (count % 4 == 3) {
      play_array(mo, mmoel, dur = 100);
      rndb = mask(rand_array(16, 0, 1), "4030");
      mmoel = combinor(rndb, notes_in_chord(45, 1,1 ));
    }
  }
}


let blah_gen = gen()
{
  setup()
  {
    let pitz = [1.5, 0.8];
    let px = 0;
  }
  run()
  {
    if (count % 16 == 15) {
      let b = rand_array(16, 0, 1);
      for (i = 0; i < 16; ++i) {
        if (b[i] == 1) {
          note_on_at(cmon, 1, i *pp);
        } else {
          note_on_at(rap, 1, i *pp);
        }
      }
    } else {
      set cmon:on 1;
      set rap:scramble 1;

    }

    if (count % 4 == 3) {
      set rap:stutter 1;
      set cmon:scramble 1;
      set rap:pitch pitz[px];
      px = incr(px, 0, len(pitz));
    }
    if (count % 8 == 7) {
      set cmon:stutter 1;
      set rap:scramble 1;
      set rap:on 1;
    }
  }
}

# let lg = grain(legowelt/Synth-SeeFeelesque2.wav);
# p9 < osc 12 "0 100"  "set lg:idx %"

#  let omar = loop(dloops/omarB.wav)
# let omarb = loop(dloops/omarB2.wav)
let omalah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 2 == 1) {
      set omar:scramble 1;
    }
    if (count % 3 == 1) {
      set omarb:scramble 1;
      set omar:stutter 1;
    }
  }
}

# let like = loop(dloops/toddTerryLIKE.aiff)
# let ss = loop(dloops/simple_song.aiff);
# let rockst = loop(dloops/rocksteady_vocal.aif); set rockst:len 4;


# let out = loop(dloops/outtasight.aiff)

let ooblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 3 == 0) {
      set out:stutter 1;
    }
    if (count % 4 == 0) {
      set pei:scramble 1;
    }
  }
}


# twitchrrr , rexian ,sqwuash, flexxy0c
let dddblah_gen = gen()
{
  setup()
  {
    let mel = [0, 15, 15, 18, 0, 15, 14, 0, 0, 20, 15, 0, 0, 15, 0, 15];
    let d = 50;
  }
  run()
  {
    if (count % 16 < 16) {
      let m = mel;
      if (count % 9 == 0) {
        m = up(m, 24);
      }
      if (count % 7 == 6) {
        m = reverse(m);
      }
      if (count % 8 == 7) {
        m = scramble(m);
      }
      play_array(mo, m, dur = d );
      d = d + 10;
      if (d > 150) {
        d = 50;
      }
    }
  }
}


# let chz = loop(dloops/chezBeaat.aiff)
# let far = loop(dloops/FarleyJamesFiget.aiff); set far:len 2
# load_preset(mo, "innercc");

let ccclah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 2 == 0) {
      set far:scramble 1;
    }
    if (count % 3 == 0) {
      set chz:scramble 1;
    }
  }
}

## BREKADOWN
# loops/houseintro.aiff

# let pei = loop(dloops/pierrehouse.aiff)
# let xb = loop(dloops/xbeatloop.aif)

let melz1 = [0, 0, 15, 15, 13, 0, 13, 13, 0, 0, 0, 17, 0, 17, 15];
let melz2 = [13, 16, 16, 0, 0, 20, 0, 13, 0, 0, 28, 17, 0, 28, 15];
let melz = melz1;
# l0renzo4
let mmodxblah_gen = gen()
{
  setup()
  {
    let mx = 0;
    let pp = PPBAR / melz;
  }
  run()
  {
    if (count % 16 == 0) {
      melz = melz1;
    }
    if (count % 21 == 20) {
      melz = melz2;
    }

    if (count % 8 < 7) {
      for (i = 0; i < len(melz); ++i) {
        if (melz[i] > 0) {
          note_on_at(dx, melz[i], i * pp);
        }
      }
    }

    if (count % 3 == 0) {
      melz = rotate(melz, 3);
      set xb:stutter 1;
    }
    if (count % 4 == 0) {
      melz = reverse(melz);
      set xb:scramble 1;
    }

  }
}

# let fmb = grain(legowelt/Synth-FMbelltron2.wav)
# p16 < osc 16 "0 100"  "set fmb:idx %"


# SQuinrrr3
# ravespaxz
let moomoblah_gen = gen()
{
  setup()
  {

  }
  run()
  {
    if (count % 4 == 3) {
      for (i = 0; i < len(melz); ++i) {
        if (melz[i] > 0) {
          note_on_at(mo, melz[i], i * pp, dur = 50);
        }
      }
    }
  }
}

# let glb = loop(loops/glitchBitloopo.aif); set glb:len 16

# let acb = loop(loops/acidSquelchBass.aiff)
# let dow = loop(loops/dowhiley1Bar.aif); set dow:pitch 0.9; set dow:len 2
let acblah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 4 == 0 ) {
      set acb:stutter 1;
      set dow:scramble 1;
    }
    if (count % 3 == 0 ) {
      set acb:scramble 1;
      set dow:stutter 1;
    }
  }
}

let sampz = [];
let gbd = sample(bd/gaborKick.aiff);
let sdr = sample(sd/draGG.aiff);
let dbblah_gen = gen()
{
  setup()
  {
    let numz = [3, 4, 7, 11, 13];
    let nx = 0;
  }
  run()
  {
    if (count % 7 < 6) {
      dbeat(gbd);
    }
    cbeat(sdr);
    let be = bjork(numz[nx], 16);
    perky(be, sampz);
  }
}

