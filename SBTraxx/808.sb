
let blah_gen = gen()
{
  setup()
  {
  }
  run()
  {
    play_array(dx100, [50, 0, 53, 52, 0, 55, 0, 48, 0, 48, 0, 50, 53, 0, 53, 0]);
  }
}



let mut = fn(val, scl) {
  return val + 12 * scl;
}

let rescale = fn(vals, rescaler) {
  # takes an array and returns a newly resized/rescaled version.
  let new_size = len(vals) * rescaler;
  let rescaled_vals = [];

  for (i = 0; i < new_size; ++i) {
    rescaled_vals = push(rescaled_vals,0);
  }

  for (i = 0; i < len(vals); ++i) {
    if (vals[i] > 0) {
      rescaled_vals[i*rescaler] = vals[i];
    }
  }

  return rescaled_vals;
}


let scaled_play = gen()
{
  setup()
  {
    let sclrz = [0.5, 1, 2, 3, 0.75];
    let six = 0;
  }
  run()
  {
    if (count % sclrz[six] == 0) {
      let scld = rescale(rf, sclrz[six]);
      let per = 3840 / len(scld);
      for (i = 0; i < len(scld); ++i) {
        if (scld[i] > 0) {
          if (rand(100) > 20) {
            note_on_at(mo, scld[i], per * i);
          } else {
            if (rand(100) > 30) {
              note_on_at(mo, notes_in_chord(scld[i], 0, true), per * i);
            } else {
              print("IT ME!");
              note_on_at(mo, inv_fn(notes_in_chord(scld[i])), 0, true), per * i);
            }
          }
        }
      }
    }
    six = incr(six, 0, len(sclrz));
    if (count % 6 == 0) {
      rf = riff();
    }
  }
}

