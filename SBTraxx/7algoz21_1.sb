let bd = sample(kicks/djkhaledKick.aiff);
let tr = sample(perc/triangle.aiff);
let cp = sample(claps/mawClap.aiff);
let hh = sample(hats/SNDhat.aiff);
let sn = sample(snrs/nord808_snr.aif);

load_dir("TT-NOCERA");



let blah_gen = gen()
{
  setup()
  {
    #let pat = pattern("[ <bd(3,8) bd(5,8)>, < [~ sn]*2  [~ ~ sn ~]   >, ~ hh*16 ~ <tr(3,8) ~>  ]  ");
    let pat = pattern("[ bd(3,8), [~ sn]*2 ]  ");
    let sampz = [piano, piano2, badum, umPIAN, whhs, wumpAH];
    let sx = 0;
    let rot = 3;
  }
  run()
  {

    let p = eval_pattern(pat);
    if (count % 2 == 0) {
      print("STUTTER!");
      stutter(p)
    }
    play_array(p);
    #let pt = eval_pattern(pat);
    #if (count % 3 == 0) {
      #  pt = rotate(pt, rot);
      #}
    #rot = incr(rot, 0, 13);
    ##print(pt);

    #let inv = invert(pat);
    ##print(inv);
    #play_array(pt);
    #if (count % 4 == 0) {
      #  play_array_over(pt, 2);
      #}
    #if (count % 7 == 0) {
      #  play_array_over(hh, inv, pt, 0.25);
      #}
    #play_array(hh, inv);

    #let c = 0;
    #for (i = 0; i < 16; ++i) {
      #  if (inv[i] > 0 && c % rot == 0) {
        #    note_on_at(sampz[sx], 1, i*pp);
        #    ++c;
        #    sx = incr(sx, 0, len(sampz));
        #  }
      #}
  }
}

let snh_gen = gen()
{
  setup()
  {
    let pat = pattern("<3 4 7 12> <~ 4 3> <~ [~ 13]> < ~ ~ ~ 21>");
  }
  run()
  {
    play_array(dx100, pat);
  }
}

