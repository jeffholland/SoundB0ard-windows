
let riff = fn()
{
  let valid_notes = notes();
  #print("VALLEYNOTES:", valid_notes);
  let beat = bjork(rand(11), 16);
  for ( i = 0; i < 16; ++i) {
    if (beat[i] == 1) {
      beat[i] = valid_notes[rand(len(valid_notes))] + 12;
    }
  }
  return beat;
}


let play_array = fn(sound_generator_target, note_seq)
{
  let nlen = len(note_seq);
  let pulses_per = 3840 / nlen;
  # print("NLEN", nlen, " PULSESPER:", pulses_per);

  for (i = 0; i < nlen; ++i) {
    if (note_seq[i] > 0) {
      note_on_at(sound_generator_target, note_seq[i], i * pulses_per);
    }
  }
}

let nn_gen = gen()
{
  setup()
  {
  }
  run()
  {
    if (count % 3 == 0) {
      play_array(dxx, rf);
    }
    if (count % 4 == 0) {
      play_array(dxx, rotate(rf, 2));
    }
  }
}



let euclgen = gen()
{
  setup()
  {
    let bidx = 3;
    let tresillo = bjork(3, 8);

    let inv = invert(tresillo);

    let cinq = bjork(5, 8);

    let ppe = 3840 / 8;

    let vel = 128;

    let inz = [bd, hh];
    let inzx = 0;

    let pitchz = [1, 2, 1.2, 0.7, 1.5];
    let pix = 0;

    let notez = riff();
  }
  run()
  {
    #print("TRES", tresillo);
    #print("INV", inv);
    for (i = 0; i < 8; ++i) {
      if (tresillo[i] == 1) {
        # print("PLAY", ppe * i);
        note_on_at(bd, 1, ppe * i, vel);
        #note_on_at(dxx, notez[nidx], ppe * i, vel);
      }
      if (inv[i] == 1) {
        note_on_at(hh, 20, ppe * i, vel);
        let note_ = rf[rand(len(rf))] + 12*(rand(3)+1);
        note_on_at(mo, note_, ppe * i);
      }
    }

    if (count % 3 == 0) {
      tresillo = rotate(tresillo, 3);
      inv = invert(tresillo);

      vel = vel + 10;
      if (vel > 128) {
        vel = 74;
      }
      set_pitch(inz[inzx], pitchz[pix]);
      inzx = incr(inzx, 0, len(inz));
      pix = incr(pix, 0, len(pitchz));

      if (rand(100) > 50) {
        nidx = incr(nidx, 0, len(notez));
      }
    }

    if (count % 4 == 0) {
      bidx = incr(bidx, 3, 7);
      tresillo = bjork(bidx, 8);
      inv = invert(tresillo);
    }
  }
}

