#let bd = sample(TT-ROYALHOUSE/bd.wav);
#let bd2 = sample(TT-ROYALHOUSE/bdork.wav);
#let bd3 = sample(TT-ROYALHOUSE/bdvocwah.wav);
#let bd4 = sample(TT-ROYALHOUSE/beet.wav);
#let bd5 = sample(TT-ROYALHOUSE/blah.wav);
#
#let ch = sample(TT-ROYALHOUSE/chewit.wav);
#let wh = sample(TT-ROYALHOUSE/whft.wav);
#let yv = sample(TT-ROYALHOUSE/youv.wav);
#let ec = sample(TT-ROYALHOUSE/ech.wav);
#let cn = sample(TT-ROYALHOUSE/canu.wav);
#let sw = sample(TT-ROYALHOUSE/schwip.wav);
#
#let teh = sample(TT-ROYALHOUSE/teh.wav);
#let not = sample(TT-ROYALHOUSE/not.wav);
#let it = sample(TT-ROYALHOUSE/it.wav);
#
#let sn = sample(TT-ROYALHOUSE/sn.wav);
#let sn2 = sample(TT-ROYALHOUSE/sn2.wav);
#let ehit  = sample(TT-ROYALHOUSE/ehit.wav);
#
#let bgn1 = sample(TT-ROYALHOUSE/bgn1.wav);
#let bgn2 = sample(TT-ROYALHOUSE/bgn2.wav);
#let bgn3 = sample(TT-ROYALHOUSE/bgn3.wav);
#let bgn4 = sample(TT-ROYALHOUSE/bgn4.wav);
#
#let tth = sample(TT-NOCERA/tth.wav);

# p4 $ "[~ <sn sn2>]*2";
#p5 $ "<ch*16 ~ ch*16 ~ ch*4> ";
#p6 < osc 12 "2 70" "set ch:fx1:fb %";

# p8 $ "<~ tth*16 tth*16 tth*12 tth*16>";
# let ork = grain(TT-ROYALHOUSE/orkloop.wav)
# p11 < osc 32 "0 100" "set ork:idx %"

let PP16 = 240;
let count = 0;

let countr = gen()
{
  setup()
  {
  }
  run()
  {
    ++count;
  }
}


let bdz = gen()
{
  setup()
  {
    #let bdz = [bd, bd2, bd3, bd4, bd5];
    let bdz = [bd, bd2, bd4];
    let bd_idx = 0;
    let bd_num = 1;
    let probz = [ 90, 10, 10, 50,  0, 0, 10, 10, 90, 20, 40, 10, 0, 0, 10, 30];
  }

  run() {
    for (i = 0; i < len(probz); ++i)  {
      let prob = rand(100);
      if (probz[i] > prob ) {
        noteOnDelayed(bdz[bd_idx], 1, i * PP16);
        bd_idx = incr(bd_idx, 0, len(bd_num));
      }
    }
    bd_num = incr(bd_num, 0, len(bdz));

    bdz = rotate(bdz, 3);
  }
}

let percz = gen()
{
  setup()
  {
    # let samplz = [ch, wh, yv, ec, sw];
    let samplz = [ch, wh, sw];
    let smp_idx = 0;
    let smp_num = 1;
    let rhythm = distrhythms_int();
  }

  run() {
    if (count % 2 == 0) {
      for (i = 0; i < len(rhythm); ++i)  {
        if (rhythm[i]) {
          noteOnDelayed(samplz[smp_idx], 1, i * PP16);
          smp_idx = incr(smp_idx, 0, len(smp_num));
        }
      }
      smp_num = incr(smp_num, 0, len(samplz));

      rhythm = distrhythms_int();
      samplz = rotate(samplz, 1);
    }
  }
}

let hatz = gen()
{
  setup()
  {
    # let samplz = [not, it, teh, ehit, cn];
    let samplz = [ehit, it, not, teh];
    let smp_idx = 0;
    let smp_num = 1;
    let rhythm = distrhythms_int();
  }

  run() {
    if (count % 3 == 0) {
      for (i = 0; i < len(rhythm); ++i)  {
        if (rhythm[i]) {
          noteOnDelayed(samplz[smp_idx], 1, i * PP16);
          smp_idx = incr(smp_idx, 0, len(samplz));
        }
      }

      rhythm = distrhythms_int();
      #samplz = rotate(samplz, 1);
    }
  }
}

let bongoz = gen()
{
  setup()
  {
    let bngz=  [bgn1, bgn2, bgn3, bgn4];
    let rand_limit = 1;
  }
  run()
  {
    let randy_rhythm = rand_array(16, 0, len(bngz) - 1);
    for (i = 0; i < len(randy_rhythm); ++i) {
      let randy_num = rand(10);
      if (randy_num < rand_limit) {
        if (randy_rhythm[i] < len(bngz)) {
          noteOnDelayed(bngz[randy_rhythm[i]], 1, i * PP16);
        }
      }
    }
    rand_limit = incr(rand_limit, 3, 10);
  }
}

