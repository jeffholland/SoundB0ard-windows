
# let bd = sample(TT-ROYALHOUSE/bd.wav);
# let bd2 = sample(TT-ROYALHOUSE/bdork.wav);
# let bd3 = sample(TT-ROYALHOUSE/bdvocwah.wav);
# let bd4 = sample(TT-ROYALHOUSE/beet.wav);
# let bd5 = sample(TT-ROYALHOUSE/blah.wav);

let PP16 = 240;

let bdz = gen()
{
  setup()
  {
    #let bdz = [bd, bd2, bd3, bd4, bd5];
    let bdzs = ["bd", "bd2", "bd3", "bd4", "bd5"];
    let bd_idx = 0;
    let num_rests = 1;
    #let rhythm = rand_array(16, 0, len(bdzs) + num_rests);
    let rhythm = [4, 3, 2, 1];
    let sorted_idx = 1;
    puts("STARTINGYP");
  }
  run()
  {

    puts("RHTYHM:", rhythm);
    if (sorted_idx < len(rhythm)) {
      puts("-1 is ", rhythm[sorted_idx -1], " and cur is ", rhythm[sorted_idx]);
      if (rhythm[sorted_idx -1] > rhythm[sorted_idx]) {
        puts("-1 val:", rhythm[sorted_idx -1], " is > than current:", rhythm[sorted_idx]);
        let cur_val = rhythm[sorted_idx];
        let rev_idx = sorted_idx;
        for ( i = sorted_idx; i > 0 && rhythm[i - 1] > cur_val ; --i) {
          puts("I:", i, " SORTED IDX:", sorted_idx);
          rhythm[i] = rhythm[i - 1];
          --rev_idx;
          puts("REVIDX:", rev_idx, " SORTED_IDX:", sorted_idx);
          puts("FOR RHTYHM:", rhythm);
        }
        rhythm[rev_idx] = cur_val;
      }
      puts("now RHTYHM:", rhythm);
      ++sorted_idx;
    }


  }
}

